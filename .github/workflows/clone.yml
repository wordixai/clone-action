name: Clone, Push, and Deploy to Fly and Cloudflare Pages with State Tracking

on:
  workflow_dispatch:
    inputs:
      source_repo_url:
        description: "URL of the source GitHub repository to clone"
        required: true
        default: "https://github.com/fly-apps/hello-fly.git"
      new_repo_name:
        description: "Name of the new GitHub repository to create"
        required: true
        default: "my-new-repo"
      github_token:
        description: "GitHub Personal Access Token with repo permissions"
        required: true
      fly_api_token:
        description: "Fly.io API Token for deployment"
        required: true
      fly_app_name:
        description: "Name of the Fly.io app to deploy to"
        required: true
        default: "my-fly-app"
      docker_image:
        description: "Docker image to deploy (e.g., registry.fly.io/my-app:latest)"
        required: true
        default: "registry.fly.io/ancodeai-app:latest"
      client_id:
        description: "Client ID for state tracking"
        required: true
        default: "workflow-client"
      cloudflare_api_token:
        description: "Cloudflare API Token for Pages project creation"
        required: true
      cloudflare_account_id:
        description: "Cloudflare Account ID for the Pages project"
        required: true
      cloudflare_project_name:
        description: "Name of the Cloudflare Pages project to create"
        required: true
        default: "my-cloudflare-project"

jobs:
  clone-push-deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Clone source repository
        run: |
          echo "Cloning from: ${{ github.event.inputs.source_repo_url }}"
          git clone ${{ github.event.inputs.source_repo_url }} /tmp/source-repo
          cd /tmp/source-repo
          echo "Using fixed main branch"
          echo "Cloned repository contents:"
          ls -la /tmp/source-repo
        # State tracking
      - name: Send clone state callback
        run: |
          RESPONSE=$(curl -X POST \
            -H "Content-Type: application/json" \
            "https://www.needware.dev/api/startup-callback" \
            -d '{
              "event": "clone_repository",
              "status": "cloned",
              "clientId": "${{ github.event.inputs.client_id }}",
              "source_repo": "${{ github.event.inputs.source_repo_url }}",
              "timestamp": "'$(date -u +"%Y-%m-%dT%H:%M:%SZ")'"
            }' \
            -w "%{http_code}" -s -o response.json)
          echo "Callback HTTP Status: $RESPONSE"
          if [ "$RESPONSE" -ne 200 ] && [ "$RESPONSE" -ne 201 ]; then
            echo "Failed to send clone callback. Response:"
            cat response.json
            echo "Continuing workflow..."
          fi

      - name: Create new GitHub repository
        run: |
          echo "Creating new repository: ${{ github.event.inputs.new_repo_name }}"
          RESPONSE=$(curl -X POST \
            -H "Authorization: token ${{ github.event.inputs.github_token }}" \
            -H "Accept: application/vnd.github.v3+json" \
            https://api.github.com/user/repos \
            -d "{\"name\":\"${{ github.event.inputs.new_repo_name }}\",\"private\":false}" \
            -w "%{http_code}" -s -o response.json)
          echo "HTTP Status: $RESPONSE"
          echo "API Response:"
          cat response.json
          if [ "$RESPONSE" -ne 201 ]; then
            echo "Failed to create repository. Sending failure callback..."
            curl -X POST \
              -H "Content-Type: application/json" \
              "https://www.needware.dev/api/startup-callback" \
              -d '{
                "event": "create_repository",
                "status": "failed_to_create",
                "clientId": "${{ github.event.inputs.client_id }}",
                "repo_name": "${{ github.event.inputs.new_repo_name }}",
                "error": "HTTP $RESPONSE - Failed to create repository",
                "timestamp": "'$(date -u +"%Y-%m-%dT%H:%M:%SZ")'"
              }' \
              -w "%{http_code}" -s
            exit 1
          fi
      - name: Send create repository state callback
        run: |
          RESPONSE=$(curl -X POST \
            -H "Content-Type: application/json" \
            "https://www.needware.dev/api/startup-callback" \
            -d '{
              "event": "create_repository",
              "status": "created",
              "clientId": "${{ github.event.inputs.client_id }}",
              "repo_name": "${{ github.event.inputs.new_repo_name }}",
              "repo_url": "https://github.com/${{ github.repository_owner }}/${{ github.event.inputs.new_repo_name }}",
              "timestamp": "'$(date -u +"%Y-%m-%dT%H:%M:%SZ")'"
            }' \
            -w "%{http_code}" -s -o response.json)
          echo "Callback HTTP Status: $RESPONSE"
          if [ "$RESPONSE" -ne 200 ] && [ "$RESPONSE" -ne 201 ]; then
            echo "Failed to send create repository callback. Response:"
            cat response.json
            echo "Continuing workflow..."
          fi

      - name: Configure Git and push to new repo
        run: |
          cd /tmp/source-repo
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git config --global user.name "GitHub Actions Bot"
          git config --global init.defaultBranch main
          REMOTE_URL=https://x-access-token:${{ github.event.inputs.github_token }}@github.com/${{ github.repository_owner }}/${{ github.event.inputs.new_repo_name }}.git
          echo "Pushing to: $REMOTE_URL"
          git remote add new-origin "$REMOTE_URL"
          git push new-origin main || {
            echo "Push failed. Sending failure callback..."
            curl -X POST \
              -H "Content-Type: application/json" \
              "https://www.needware.dev/api/startup-callback" \
              -d '{
                "event": "push_repository",
                "status": "failed_to_push",
                "clientId": "${{ github.event.inputs.client_id }}",
                "repo_url": "https://github.com/${{ github.repository_owner }}/${{ github.event.inputs.new_repo_name }}",
                "error": "Failed to push to branch main",
                "timestamp": "'$(date -u +"%Y-%m-%dT%H:%M:%SZ")'"
              }' \
              -w "%{http_code}" -s
            echo "Push failed. Remote branches:"
            git ls-remote new-origin
            exit 1
          }
      - name: Send push state callback
        run: |
          RESPONSE=$(curl -X POST \
            -H "Content-Type: application/json" \
            "https://www.needware.dev/api/startup-callback" \
            -d '{
              "event": "push_repository",
              "status": "pushed",
              "clientId": "${{ github.event.inputs.client_id }}",
              "repo_url": "https://github.com/${{ github.repository_owner }}/${{ github.event.inputs.new_repo_name }}",
              "branch": "main",
              "timestamp": "'$(date -u +"%Y-%m-%dT%H:%M:%SZ")'"
            }' \
            -w "%{http_code}" -s -o response.json)
          echo "Callback HTTP Status: $RESPONSE"
          if [ "$RESPONSE" -ne 200 ] && [ "$RESPONSE" -ne 201 ]; then
            echo "Failed to send push callback. Response:"
            cat response.json
            echo "Continuing workflow..."
          fi

      - name: Create Cloudflare Pages project
        run: |
          echo "Creating Cloudflare Pages project: ${{ github.event.inputs.cloudflare_project_name }}"
          RESPONSE=$(curl -X POST \
            -H "Authorization: Bearer ${{ github.event.inputs.cloudflare_api_token }}" \
            -H "Content-Type: application/json" \
            "https://api.cloudflare.com/client/v4/accounts/${{ github.event.inputs.cloudflare_account_id }}/pages/projects" \
            -d '{
              "name": "${{ github.event.inputs.cloudflare_project_name }}",
              "source": {
                "type": "github",
                "config": {
                  "owner": "${{ github.repository_owner }}",
                  "repo_name": "${{ github.event.inputs.new_repo_name }}",
                  "production_branch": "main",
                  "pr_comments_enabled": true,
                  "deployments_enabled": true,
                  "preview_deployment_setting": "all",
                  "preview_branch_includes": ["*"],
                  "preview_branch_excludes": [],
                  "production_deployments_enabled": true,
                  "build_caching": true
                }
              },
              "build_config": {
                "build_command": "npm run build",
                "destination_dir": "dist",
                "root_dir": "",
                "web_analytics_tag": "",
                "web_analytics_token": ""
              },
              "deployment_configs": {
                "production": {
                  "environment_variables": {},
                  "kv_namespaces": {},
                  "durable_object_namespaces": {},
                  "d1_databases": {},
                  "r2_buckets": {},
                  "services": {},
                  "placement": {
                    "mode": "smart"
                  }
                },
                "preview": {
                  "environment_variables": {},
                  "kv_namespaces": {},
                  "durable_object_namespaces": {},
                  "d1_databases": {},
                  "r2_buckets": {},
                  "services": {},
                  "placement": {
                    "mode": "smart"
                  }
                }
              },
              "canonical_deployment": {
                "type": "production",
                "branch": "main"
              }
            }' \
            -w "%{http_code}" -s -o response.json)
          echo "HTTP Status: $RESPONSE"
          echo "API Response:"
          cat response.json
          if [ "$RESPONSE" -ne 200 ] && [ "$RESPONSE" -ne 201 ]; then
            echo "Failed to create Cloudflare Pages project. Sending failure callback..."
            curl -X POST \
              -H "Content-Type: application/json" \
              "https://www.needware.dev/api/startup-callback" \
              -d '{
                "event": "create_cloudflare_project",
                "status": "failed_to_create",
                "clientId": "${{ github.event.inputs.client_id }}",
                "project_name": "${{ github.event.inputs.cloudflare_project_name }}",
                "error": "HTTP $RESPONSE - Failed to create Cloudflare Pages project",
                "timestamp": "'$(date -u +"%Y-%m-%dT%H:%M:%SZ")'"
              }' \
              -w "%{http_code}" -s
            echo "Continuing workflow despite Cloudflare Pages project creation failure..."
          else
            echo "Successfully created Cloudflare Pages project"
          fi
      - name: Send create Cloudflare Pages project state callback
        run: |
          RESPONSE=$(curl -X POST \
            -H "Content-Type: application/json" \
            "https://www.needware.dev/api/startup-callback" \
            -d '{
              "event": "create_cloudflare_project",
              "status": "created",
              "clientId": "${{ github.event.inputs.client_id }}",
              "project_name": "${{ github.event.inputs.cloudflare_project_name }}",
              "project_url": "https://${{ github.event.inputs.cloudflare_project_name }}.pages.dev",
              "repo_url": "https://github.com/${{ github.repository_owner }}/${{ github.event.inputs.new_repo_name }}",
              "timestamp": "'$(date -u +"%Y-%m-%dT%H:%M:%SZ")'"
            }' \
            -w "%{http_code}" -s -o response.json)
          echo "Callback HTTP Status: $RESPONSE"
          if [ "$RESPONSE" -ne 200 ] && [ "$RESPONSE" -ne 201 ]; then
            echo "Failed to send create Cloudflare Pages project callback. Response:"
            cat response.json
            echo "Continuing workflow..."
          fi

      - name: Trigger Cloudflare Pages deployment
        run: |
          echo "Triggering Cloudflare Pages deployment for project: ${{ github.event.inputs.cloudflare_project_name }}"
          RESPONSE=$(curl -X POST \
            -H "Authorization: Bearer ${{ github.event.inputs.cloudflare_api_token }}" \
            -H "Content-Type: application/json" \
            "https://api.cloudflare.com/client/v4/accounts/${{ github.event.inputs.cloudflare_account_id }}/pages/projects/${{ github.event.inputs.cloudflare_project_name }}/deployments" \
            -d '{
              "branch": "main"
            }' \
            -w "%{http_code}" -s -o response.json)
          echo "HTTP Status: $RESPONSE"
          echo "API Response:"
          cat response.json
          if [ "$RESPONSE" -ne 200 ] && [ "$RESPONSE" -ne 201 ]; then
            echo "Failed to trigger Cloudflare Pages deployment. Sending failure callback..."
            curl -X POST \
              -H "Content-Type: application/json" \
              "https://www.needware.dev/api/startup-callback" \
              -d '{
                "event": "trigger_cloudflare_deployment",
                "status": "failed_to_trigger",
                "clientId": "${{ github.event.inputs.client_id }}",
                "project_name": "${{ github.event.inputs.cloudflare_project_name }}",
                "error": "HTTP $RESPONSE - Failed to trigger Cloudflare Pages deployment",
                "timestamp": "'$(date -u +"%Y-%m-%dT%H:%M:%SZ")'"
              }' \
              -w "%{http_code}" -s
            echo "Continuing workflow despite Cloudflare Pages deployment trigger failure..."
          else
            echo "Successfully triggered Cloudflare Pages deployment"
          fi
      - name: Send trigger Cloudflare Pages deployment state callback
        run: |
          RESPONSE=$(curl -X POST \
            -H "Content-Type: application/json" \
            "https://www.needware.dev/api/startup-callback" \
            -d '{
              "event": "trigger_cloudflare_deployment",
              "status": "triggered",
              "clientId": "${{ github.event.inputs.client_id }}",
              "project_name": "${{ github.event.inputs.cloudflare_project_name }}",
              "project_url": "https://${{ github.event.inputs.cloudflare_project_name }}.pages.dev",
              "timestamp": "'$(date -u +"%Y-%m-%dT%H:%M:%SZ")'"
            }' \
            -w "%{http_code}" -s -o response.json)
          echo "Callback HTTP Status: $RESPONSE"
          if [ "$RESPONSE" -ne 200 ] && [ "$RESPONSE" -ne 201 ]; then
            echo "Failed to send trigger Cloudflare Pages deployment callback. Response:"
            cat response.json
            echo "Continuing workflow..."
          fi

      - name: Checkout workflow repository
        uses: actions/checkout@v4

      - name: Setup flyctl
        uses: superfly/flyctl-actions/setup-flyctl@master
        with:
          version: "0.3.94"

      - name: Add fly.toml locally for deployment
        run: |
          cd /tmp/source-repo
          cat << 'EOF' > fly.toml
          app = '${{ github.event.inputs.fly_app_name }}'
          primary_region = 'sin'
          [build]
            image = '${{ github.event.inputs.docker_image }}'
          [http_service]
            internal_port = 8080
            force_https = true
            auto_stop_machines = 'suspend'
            auto_start_machines = true
            min_machines_running = 0
            max_machines_running = 1
            processes = ['app']
          [[vm]]
            memory = '2gb'
            cpu_kind = 'shared'
            cpus = 1
            memory_mb = 2048
          EOF
          echo "Created fly.toml locally at /tmp/source-repo with image ${{ github.event.inputs.docker_image }}:"
          cat fly.toml

      - name: Create Fly.io app via API
        run: |
          echo "Creating Fly.io app: ${{ github.event.inputs.fly_app_name }}"
          RESPONSE=$(curl -X POST \
            -H "Authorization: Bearer ${{ github.event.inputs.fly_api_token }}" \
            -H "Content-Type: application/json" \
            "https://api.machines.dev/v1/apps" \
            -d '{
              "org_slug": "needware",
              "app_name": "${{ github.event.inputs.fly_app_name }}",
              "enable_subdomains": true
            }' \
            -w "%{http_code}" -s -o response.json)
          echo "HTTP Status: $RESPONSE"
          echo "API Response:"
          cat response.json
          if [ "$RESPONSE" -ne 201 ]; then
            echo "Failed to create Fly.io app. Sending failure callback..."
            curl -X POST \
              -H "Content-Type: application/json" \
              "https://www.needware.dev/api/startup-callback" \
              -d '{
                "event": "create_fly_app",
                "status": "failed_to_create",
                "clientId": "${{ github.event.inputs.client_id }}",
                "app_name": "${{ github.event.inputs.fly_app_name }}",
                "error": "HTTP $RESPONSE - Failed to create Fly.io app",
                "timestamp": "'$(date -u +"%Y-%m-%dT%H:%M:%SZ")'"
              }' \
              -w "%{http_code}" -s
            exit 1
          fi
      - name: Send create Fly.io app state callback
        run: |
          RESPONSE=$(curl -X POST \
            -H "Content-Type: application/json" \
            "https://www.needware.dev/api/startup-callback" \
            -d '{
              "event": "create_fly_app",
              "status": "created",
              "clientId": "${{ github.event.inputs.client_id }}",
              "app_name": "${{ github.event.inputs.fly_app_name }}",
              "app_url": "https://${{ github.event.inputs.fly_app_name }}.fly.dev",
              "timestamp": "'$(date -u +"%Y-%m-%dT%H:%M:%SZ")'"
            }' \
            -w "%{http_code}" -s -o response.json)
          echo "Callback HTTP Status: $RESPONSE"
          if [ "$RESPONSE" -ne 200 ] && [ "$RESPONSE" -ne 201 ]; then
            echo "Failed to send create Fly.io app callback. Response:"
            cat response.json
            echo "Continuing workflow..."
          fi

      - name: Deploy to Fly.io
        env:
          FLY_API_TOKEN: ${{ github.event.inputs.fly_api_token }}
        run: |
          cd /tmp/source-repo
          echo "Deploying to Fly.io app: ${{ github.event.inputs.fly_app_name }}"
          flyctl deploy --app ${{ github.event.inputs.fly_app_name }} --remote-only || {
            echo "Deployment failed. Sending failure callback..."
            curl -X POST \
              -H "Content-Type: application/json" \
              "https://www.needware.dev/api/startup-callback" \
              -d '{
                "event": "deploy_fly_app",
                "status": "failed_to_deploy",
                "clientId": "${{ github.event.inputs.client_id }}",
                "app_name": "${{ github.event.inputs.fly_app_name }}",
                "error": "Failed to deploy to Fly.io",
                "timestamp": "'$(date -u +"%Y-%m-%dT%H:%M:%SZ")'"
              }' \
              -w "%{http_code}" -s
            echo "Deployment failed. Fly.io status:"
            flyctl status --app ${{ github.event.inputs.fly_app_name }}
            exit 1
          }
          echo "Deployment successful"
      - name: Send deploy state callback
        run: |
          RESPONSE=$(curl -X POST \
            -H "Content-Type: application/json" \
            "https://www.needware.dev/api/startup-callback" \
            -d '{
              "event": "deploy_fly_app",
              "status": "deployed",
              "clientId": "${{ github.event.inputs.client_id }}",
              "app_name": "${{ github.event.inputs.fly_app_name }}",
              "app_url": "https://${{ github.event.inputs.fly_app_name }}.fly.dev",
              "docker_image": "${{ github.event.inputs.docker_image }}",
              "timestamp": "'$(date -u +"%Y-%m-%dT%H:%M:%SZ")'"
            }' \
            -w "%{http_code}" -s -o response.json)
          echo "Callback HTTP Status: $RESPONSE"
          if [ "$RESPONSE" -ne 200 ] && [ "$RESPONSE" -ne 201 ]; then
            echo "Failed to send deploy callback. Response:"
            cat response.json
            echo "Continuing workflow..."
          fi

      - name: Scale Fly.io app to 1 machine
        env:
          FLY_API_TOKEN: ${{ github.event.inputs.fly_api_token }}
        run: |
          echo "Scaling Fly.io app ${{ github.event.inputs.fly_app_name }} to 1 machine"
          flyctl scale count 1 --app ${{ github.event.inputs.fly_app_name }} --yes || {
            echo "Failed to scale app. Sending failure callback..."
            curl -X POST \
              -H "Content-Type: application/json" \
              "https://www.needware.dev/api/startup-callback" \
              -d '{
                "event": "scale_fly_app",
                "status": "failed_to_scale",
                "clientId": "${{ github.event.inputs.client_id }}",
                "app_name": "${{ github.event.inputs.fly_app_name }}",
                "error": "Failed to scale to 1 machine",
                "timestamp": "'$(date -u +"%Y-%m-%dT%H:%M:%SZ")'"
              }' \
              -w "%{http_code}" -s
            echo "Failed to scale app. Current status:"
            flyctl status --app ${{ github.event.inputs.fly_app_name }}
            exit 1
          }
          echo "Successfully scaled to 1 machine"
      - name: Send scale state callback
        run: |
          RESPONSE=$(curl -X POST \
            -H "Content-Type: application/json" \
            "https://www.needware.dev/api/startup-callback" \
            -d '{
              "event": "scale_fly_app",
              "status": "scaled",
              "clientId": "${{ github.event.inputs.client_id }}",
              "app_name": "${{ github.event.inputs.fly_app_name }}",
              "machine_count": 1,
              "timestamp": "'$(date -u +"%Y-%m-%dT%H:%M:%SZ")'"
            }' \
            -w "%{http_code}" -s -o response.json)
          echo "Callback HTTP Status: $RESPONSE"
          if [ "$RESPONSE" -ne 200 ] && [ "$RESPONSE" -ne 201 ]; then
            echo "Failed to send scale callback. Response:"
            cat response.json
            echo "Continuing workflow..."
          fi

      - name: Reset Fly.io Wireguard
        env:
          FLY_API_TOKEN: ${{ github.event.inputs.fly_api_token }}
        run: |
          echo "Resetting Fly.io Wireguard connection"
          flyctl wireguard reset || {
            echo "Failed to reset wireguard. Sending failure callback..."
            curl -X POST \
              -H "Content-Type: application/json" \
              "https://www.needware.dev/api/startup-callback" \
              -d '{
                "event": "reset_wireguard",
                "status": "failed_to_reset",
                "clientId": "${{ github.event.inputs.client_id }}",
                "app_name": "${{ github.event.inputs.fly_app_name }}",
                "error": "Failed to reset Wireguard",
                "timestamp": "'$(date -u +"%Y-%m-%dT%H:%M:%SZ")'"
              }' \
              -w "%{http_code}" -s
            echo "Continuing anyway..."
          }
          flyctl wireguard websockets enable || {
            echo "Failed to enable wireguard websockets. Sending failure callback..."
            curl -X POST \
              -H "Content-Type: application/json" \
              "https://www.needware.dev/api/startup-callback" \
              -d '{
                "event": "enable_wireguard_websockets",
                "status": "failed_to_enable",
                "clientId": "${{ github.event.inputs.client_id }}",
                "app_name": "${{ github.event.inputs.fly_app_name }}",
                "error": "Failed to enable Wireguard websockets",
                "timestamp": "'$(date -u +"%Y-%m-%dT%H:%M:%SZ")'"
              }' \
              -w "%{http_code}" -s
            echo "Continuing anyway..."
          }
          echo "Wireguard reset completed"
      - name: Send Wireguard state callback
        run: |
          RESPONSE=$(curl -X POST \
            -H "Content-Type: application/json" \
            "https://www.needware.dev/api/startup-callback" \
            -d '{
              "event": "reset_wireguard",
              "status": "reset",
              "clientId": "${{ github.event.inputs.client_id }}",
              "app_name": "${{ github.event.inputs.fly_app_name }}",
              "timestamp": "'$(date -u +"%Y-%m-%dT%H:%M:%SZ")'"
            }' \
            -w "%{http_code}" -s -o response.json)
          echo "Callback HTTP Status: $RESPONSE"
          if [ "$RESPONSE" -ne 200 ] && [ "$RESPONSE" -ne 201 ]; then
            echo "Failed to send Wireguard callback. Response:"
            cat response.json
            echo "Continuing workflow..."
          fi

      - name: Login to Fly.io machine and pull from GitHub
        env:
          FLY_API_TOKEN: ${{ github.event.inputs.fly_api_token }}
        run: |
          echo "Logging into Fly.io machine for app: ${{ github.event.inputs.fly_app_name }}"
          GITHUB_REMOTE_URL="https://${{ github.event.inputs.github_token }}@github.com/${{ github.repository_owner }}/${{ github.event.inputs.new_repo_name }}.git"
          flyctl ssh console --app ${{ github.event.inputs.fly_app_name }} -C "sh -c '\
            git config --global init.defaultBranch main; \
            echo \"Associating with GitHub repo: $GITHUB_REMOTE_URL\"; \
            if [ -d .git ]; then \
              git remote set-url origin $GITHUB_REMOTE_URL; \
              git remote -v; \
              echo \"Fetching and resetting to remote...\"; \
              git fetch origin; \
              git reset --hard origin/main || echo \"Reset failed\"; \
            else \
              echo \"No .git directory found, initializing and pulling...\"; \
              git init; \
              git remote add origin $GITHUB_REMOTE_URL; \
              git remote -v; \
              echo \"Fetching and resetting to remote...\"; \
              git fetch origin; \
              git reset --hard origin/main || echo \"Reset failed\"; \
            fi; \
            echo \"Installing pnpm dependencies...\"; \
            if [ -f package.json ]; then \
              pnpm install || echo \"pnpm install failed\"; \
            else \
              echo \"No package.json found, skipping pnpm install\"; \
            fi; \
            ls -la'" || {
            echo "Failed to login or pull from GitHub. Sending failure callback..."
            curl -X POST \
              -H "Content-Type: application/json" \
              "https://www.needware.dev/api/startup-callback" \
              -d '{
                "event": "sync_fly_machine",
                "status": "failed_to_sync",
                "clientId": "${{ github.event.inputs.client_id }}",
                "app_name": "${{ github.event.inputs.fly_app_name }}",
                "error": "Failed to login or pull from GitHub",
                "timestamp": "'$(date -u +"%Y-%m-%dT%H:%M:%SZ")'"
              }' \
              -w "%{http_code}" -s
            echo "Fly.io status:"
            flyctl status --app ${{ github.event.inputs.fly_app_name }}
            exit 1
          }
          echo "Successfully pulled from GitHub and reset to remote"
      - name: Send sync Fly.io machine state callback
        run: |
          RESPONSE=$(curl -X POST \
            -H "Content-Type: application/json" \
            "https://www.needware.dev/api/startup-callback" \
            -d '{
              "event": "sync_fly_machine",
              "status": "synced",
              "clientId": "${{ github.event.inputs.client_id }}",
              "app_name": "${{ github.event.inputs.fly_app_name }}",
              "repo_url": "https://github.com/${{ github.repository_owner }}/${{ github.event.inputs.new_repo_name }}",
              "timestamp": "'$(date -u +"%Y-%m-%dT%H:%M:%SZ")'"
            }' \
            -w "%{http_code}" -s -o response.json)
          echo "Callback HTTP Status: $RESPONSE"
          if [ "$RESPONSE" -ne 200 ] && [ "$RESPONSE" -ne 201 ]; then
            echo "Failed to send sync Fly.io machine callback. Response:"
            cat response.json
            echo "Continuing workflow..."
          fi

      - name: Verify push and deployment
        run: |
          echo "Pushed to: https://github.com/${{ github.repository_owner }}/${{ github.event.inputs.new_repo_name }}"
          echo "Deployed to Fly.io: https://${{ github.event.inputs.fly_app_name }}.fly.dev"
          echo "Deployed to Cloudflare Pages: https://${{ github.event.inputs.cloudflare_project_name }}.pages.dev"
