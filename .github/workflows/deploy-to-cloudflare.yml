name: Deploy to Cloudflare Pages

on:
  workflow_dispatch:
    inputs:
      repository_url:
        description: 'GitHub Repository URL'
        required: true
      cloudflare_api_token:
        description: 'Cloudflare API Token'
        required: true
      cloudflare_api_dns_token:
        description: 'Cloudflare API Token for DNS operations'
        required: true
      cloudflare_account_id:
        description: 'Cloudflare Account ID'
        required: true
      cloudflare_zone_id:
        description: 'Cloudflare Zone ID for needware.dev'
        required: true
      cloudflare_project_name:
        description: 'Cloudflare Pages Project Name'
        required: true
      github_token:
        description: 'GitHub Token'
        required: true
      app_id:
        description: 'App ID'
        required: true
      custom_domain:
        description: 'Custom domain (e.g., myapp.example.com)'
        required: true

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          repository: ${{ github.event.inputs.repository_url }}
          token: ${{ github.event.inputs.github_token }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 9

      - name: Install dependencies
        run: pnpm install

      - name: Build project
        run: |
          if ! pnpm run build; then
            echo "Build failed"
            exit 1
          fi
          if [ ! -d "dist" ]; then
            echo "Error: dist directory not found"
            exit 1
          fi

      - name: Check if Cloudflare Pages project exists
        id: check_project
        run: |
          response=$(curl -s -X GET \
            "https://api.cloudflare.com/client/v4/accounts/${{ github.event.inputs.cloudflare_account_id }}/pages/projects/${{ github.event.inputs.cloudflare_project_name }}" \
            -H "Authorization: Bearer ${{ github.event.inputs.cloudflare_api_token }}" \
            -H "Content-Type: application/json")
          
          echo "Response: $response"
          
          # Check if project exists
          if echo "$response" | grep -q '"success": true'; then
            echo "exists=true" >> $GITHUB_OUTPUT
            echo "Project exists"
          else
            echo "exists=false" >> $GITHUB_OUTPUT
            echo "Project does not exist"
          fi

      - name: Create Cloudflare Pages project
        if: steps.check_project.outputs.exists == 'false'
        run: |
          echo "Creating Cloudflare Pages project: ${{ github.event.inputs.cloudflare_project_name }}"
          response=$(curl -s -X POST \
            "https://api.cloudflare.com/client/v4/accounts/${{ github.event.inputs.cloudflare_account_id }}/pages/projects" \
            -H "Authorization: Bearer ${{ github.event.inputs.cloudflare_api_token }}" \
            -H "Content-Type: application/json" \
            -d "{\"name\":\"${{ github.event.inputs.cloudflare_project_name }}\",\"production_branch\":\"main\"}")
          
          echo "Create response: $response"
          
          if echo "$response" | grep -q '"success": true'; then
            echo "Project created successfully"
          else
            echo "Failed to create project"
            echo "$response"
            exit 1
          fi

      - name: Deploy to Cloudflare Pages
        id: deploy
        uses: cloudflare/pages-action@v1
        with:
          apiToken: ${{ github.event.inputs.cloudflare_api_token }}
          accountId: ${{ github.event.inputs.cloudflare_account_id }}
          projectName: ${{ github.event.inputs.cloudflare_project_name }}
          directory: dist
          gitHubToken: ${{ github.event.inputs.github_token }}

      - name: Bind custom domain
        if: steps.deploy.outcome == 'success'
        run: |
          # Function to add DNS records
          add_dns_records() {
            local domain="$1"
            local zone_id="${{ github.event.inputs.cloudflare_zone_id }}"
            
            echo "Adding DNS records for $domain..."
            echo "Zone ID: $zone_id"
            
            # Add CNAME record pointing to the Pages project
            pages_url="${{ github.event.inputs.cloudflare_project_name }}.pages.dev"
            echo "Adding CNAME record: $domain -> $pages_url"
            
            cname_response=$(curl -s -X POST \
              "https://api.cloudflare.com/client/v4/zones/$zone_id/dns_records" \
              -H "Authorization: Bearer ${{ github.event.inputs.cloudflare_api_dns_token }}" \
              -H "Content-Type: application/json" \
              -d "{
                \"type\": \"CNAME\",
                \"name\": \"$domain\",
                \"content\": \"$pages_url\",
                \"ttl\": 1,
                \"proxied\": true
              }")
            
            echo "CNAME record response: $cname_response"
            
            if echo "$cname_response" | grep -q '"success": true'; then
              echo "‚úÖ CNAME record added successfully"
              echo "üìù DNS record: $domain -> $pages_url"
            else
              echo "‚ùå Failed to add CNAME record"
              echo "$cname_response"
              # Check if record already exists
              if echo "$cname_response" | grep -q "already exists\|duplicate"; then
                echo "‚ÑπÔ∏è Record may already exist"
              fi
            fi
          }
          
          CUSTOM_DOMAIN="${{ github.event.inputs.custom_domain }}"
          echo "Attempting to bind custom domain: $CUSTOM_DOMAIN"
          
          # First, check if the domain is already bound
          echo "Checking if domain is already bound..."
          check_response=$(curl -s -X GET \
            "https://api.cloudflare.com/client/v4/accounts/${{ github.event.inputs.cloudflare_account_id }}/pages/projects/${{ github.event.inputs.cloudflare_project_name }}/domains" \
            -H "Authorization: Bearer ${{ github.event.inputs.cloudflare_api_token }}" \
            -H "Content-Type: application/json")
          
          echo "Domain check response: $check_response"
          
          # Check if domain is already bound
          if echo "$check_response" | grep -q "\"$CUSTOM_DOMAIN\""; then
            echo "Domain $CUSTOM_DOMAIN is already bound"
            exit 0
          fi
          
          # Add custom domain using the correct API endpoint and format
          echo "Adding custom domain to project..."
          response=$(curl -s -X POST \
            "https://api.cloudflare.com/client/v4/accounts/${{ github.event.inputs.cloudflare_account_id }}/pages/projects/${{ github.event.inputs.cloudflare_project_name }}/domains" \
            -H "Authorization: Bearer ${{ github.event.inputs.cloudflare_api_token }}" \
            -H "Content-Type: application/json" \
            -d "{\"name\":\"$CUSTOM_DOMAIN\"}")
          
          echo "Domain binding response: $response"
          
          if echo "$response" | grep -q '"success": true'; then
            echo "‚úÖ Domain $CUSTOM_DOMAIN bound successfully"
            echo "üåê Your site will be available at: https://$CUSTOM_DOMAIN"
            
            # Add DNS records for the custom domain
            echo "Adding DNS records for $CUSTOM_DOMAIN..."
            add_dns_records "$CUSTOM_DOMAIN"
          else
            echo "‚ùå Failed to bind domain $CUSTOM_DOMAIN"
            echo "Error details: $response"
            echo ""
            echo "üîß Manual setup required:"
            echo "1. Go to Cloudflare Dashboard > Pages > Your Project"
            echo "2. Click 'Custom domains' tab"
            echo "3. Add domain: $CUSTOM_DOMAIN"
            echo "4. Follow the DNS verification steps"
            echo ""
            echo "üìù Note: Your site is available at the default .pages.dev URL"
            echo "Default URL: https://${{ github.event.inputs.cloudflare_project_name }}.pages.dev"
            # Don't fail the workflow if domain binding fails
            echo "Continuing workflow despite domain binding failure"
          fi

      - name: Send notification to Genfly
        if: always()
        run: |
          if [ "${{ job.status }}" == "success" ] && [ "${{ steps.deploy.outcome }}" == "success" ]; then
            STATUS="completed"
          else
            STATUS="failed"
          fi
          curl -X POST https://www.genfly.dev/api/send \
            -H "Content-Type: application/json" \
            -d "{\"clientId\": \"${{ github.event.inputs.app_id }}\", \"status\": \"$STATUS\"}"