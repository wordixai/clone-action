name: Revert Commit in Remote Repo

on:
  workflow_dispatch:
    inputs:
      commit_sha:
        description: 'The commit SHA to revert'
        required: true
      branch:
        description: 'The branch to operate on'
        required: true
      repo_name:
        description: 'The repository name (e.g., genfly-${appName})'
        required: true
      github_token:
        description: 'The GitHub token for authentication'
        required: true
      fly_api_token:
        description: 'The Fly.io API token'
        required: true
      fly_app_name:
        description: 'The Fly.io app name'
        required: true

jobs:
  revert-remote:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout workflow repository
        uses: actions/checkout@v4
      - name: Setup flyctl
        uses: superfly/flyctl-actions/setup-flyctl@master
        with:
          version: "0.3.94"
      - name: Clone source repository
        run: |
          git clone https://x-access-token:${{ github.event.inputs.github_token }}@github.com/wordixai/${{ github.event.inputs.repo_name }} /tmp/source-repo
          cd /tmp/source-repo
          git checkout ${{ github.event.inputs.branch }}

      - name: Setup Git config
        run: |
          cd /tmp/source-repo
          git config user.name "GitHub Actions Bot"
          git config user.email "actions@github.com"

      - name: Force revert specified commit
        run: |
          cd /tmp/source-repo
          git fetch --all
          # Attempt to revert
          git revert ${{ github.event.inputs.commit_sha }} --no-edit || {
            # If revert fails due to conflicts, resolve by accepting the reverted state
            echo "Conflicts detected, forcing revert by accepting reverted state"
            # Reset index and working tree to match the reverted state
            git checkout ${{ github.event.inputs.commit_sha }}^ -- .
            # Add all changes to staging
            git add .
            # Continue the revert
            git revert --continue
          }

      - name: Push changes
        run: |
          cd /tmp/source-repo
          git push origin ${{ github.event.inputs.branch }}

      - name: Check and start Fly.io machine if not running
        env:
          FLY_API_TOKEN: ${{ github.event.inputs.fly_api_token }}
        run: |
          echo "Checking Fly.io app status: ${{ github.event.inputs.fly_app_name }}"
          MACHINE_STATUS=$(flyctl status --app ${{ github.event.inputs.fly_app_name }} --json | jq -r '.Machines[0].state // "unknown"')
          echo "Machine status: $MACHINE_STATUS"
          if [ "$MACHINE_STATUS" = "unknown" ] || [ "$MACHINE_STATUS" = "stopped" ] || [ "$MACHINE_STATUS" = "suspended" ]; then
            echo "Starting Fly.io machine..."
            flyctl machine start --app ${{ github.event.inputs.fly_app_name }} || {
              echo "Failed to start machine. Full status:"
              flyctl status --app ${{ github.event.inputs.fly_app_name }}
              exit 1
            }
            sleep 10
            echo "Machine started"
          else
            echo "Machine already running or in a valid state"
          fi

      - name: Login to Fly.io machine and pull from GitHub
        env:
          FLY_API_TOKEN: ${{ github.event.inputs.fly_api_token }}
        run: |
          echo "Logging into Fly.io machine for app: ${{ github.event.inputs.fly_app_name }}"
          GITHUB_REMOTE_URL="https://${{ github.event.inputs.github_token }}@github.com/wordixai/${{ github.event.inputs.repo_name }}.git"
          flyctl ssh console --app ${{ github.event.inputs.fly_app_name }} -C "sh -c '\
            echo \"Associating with GitHub repo: $GITHUB_REMOTE_URL\"; \
            if [ -d /tmp/source-repo ]; then \
              cd /tmp/source-repo; \
              git remote set-url origin $GITHUB_REMOTE_URL; \
              git remote -v; \
              echo \"Fetching and pulling latest changes...\"; \
              git fetch origin; \
              git pull origin ${{ github.event.inputs.branch }} || echo \"Pull failed\"; \
            else \
              echo \"No repo found, cloning from GitHub...\"; \
              git clone $GITHUB_REMOTE_URL /tmp/source-repo; \
              cd /tmp/source-repo; \
              git checkout ${{ github.event.inputs.branch }} || echo \"Checkout failed\"; \
            fi; \
            echo \"Current directory contents:\"; \
            ls -la'" || {
            echo "Failed to login or pull from GitHub. Fly.io status:"
            flyctl status --app ${{ github.event.inputs.fly_app_name }}
            exit 1
          }
          echo "Successfully pulled reverted changes from GitHub"

      - name: Verify deployment
        run: |
          echo "Reverted commit ${{ github.event.inputs.commit_sha }} in: https://github.com/wordixai/${{ github.event.inputs.repo_name }}"
          echo "Updated code pulled to Fly.io app: ${{ github.event.inputs.fly_app_name }}"    